const fs = require("fs");

const iconsPath = "./src/components/Shared/Icon/icons";
const removeExtension = (myString) => {
  let justName = myString.split(".");
  justName.pop();
  justName = justName.join(".");

  return justName;
};
const camelCased = (myString) => {
  const justName = removeExtension(myString);
  const prepareCC = justName.split("-");

  return prepareCC.map((string) => string.charAt(0).toUpperCase() + string.slice(1)).join("");
};

const icons = fs.readdirSync(iconsPath);

const template = `/**
 *
 * DON'T CHANGE THIS FILE, IT'S AUTOMATICALLY GENERATED BY RUNNING "npm run generate:icons"
 *
 */
import React, { ReactElement } from "react";
${icons.map((icon) => `import ${camelCased(icon)} from "./icons/${icon}";`).join("")}

export type IconName =
${icons.map((icon) => `|"${removeExtension(icon)}"`).join("")}

interface Props {
  name: IconName;
  className?: string;
}

const getIcon = (inputName: IconName, className = ""): ReactElement => {
  switch (inputName) {
${icons
  .map((icon) => `case "${removeExtension(icon)}":return <${camelCased(icon)} className={className || null} />;`)
  .join("")}
  }
};

const Icon: React.FC<Props> = ({ name, className = "" }) => {
  return getIcon(name, className);
};

export default Icon;`;

fs.writeFile("./src/components/Shared/Icon/Icon.tsx", template, { encoding: "utf-8" }, () => undefined);
